[build-system]
requires = [
  "setuptools>=45",
  "setuptools_scm[toml]>=6.2",
  ]
build-backend = "setuptools.build_meta"

[project]
name = "pytest-examples"
description = "Examples of working with pytest"
readme = "README.md"
license = {text = "MIT"}
dynamic = ["version"]
authors = [
  {name = "Neil Shephard", email = "n.shephard@sheffield.ac.uk"},
]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
]
keywords = [
  "pytest",
  "examples"
]
requires-python = ">=3.9"
dependencies = [
  "loguru",
  "matplotlib",
  "numpy",
  "pytest-cov",
  "pytest-mpl",
  "scikit-image",
]

[project.optional-dependencies]
tests = [
  "py",
  "pytest",
  "pytest-cov",
  "pytest-mpl",
  "pytest-tmp-files",
]
docs = [
  "Sphinx",
  "myst_parser",
  "numpydoc",
  "pydata_sphinx_theme",
  "sphinx-autoapi",
  "sphinx-autodoc-typehints",
  "sphinx-multiversion",
  "sphinx_markdown_tables",
  "sphinx_rtd_theme",
  "sphinxcontrib-mermaid",
  "sphinxcontrib-napoleon",
]
dev = [
  "codespell",
  "Flake8-pyproject",
  "black",
  "flake8",
  "flake8-print",
  "mypy",
  "pre-commit",
  "pylint",
  "pyupgrade",
  "pytest-durations",
  "pytest-xdist",
  "ruff",
  "tracelogger",
]
pypi = [
  "build",
  "wheel",
  "setuptools_scm[toml]",
  "twine",
]

[project.urls]
Source = "https://github.com/ns-rse/pytest-examples"
Bug_Tracker = "https://github.com/ns-rse/pytest-examples/issues"

[tool.flake8]
max_line_length=120
docstring-convention= "numpy"
exclude = [
  "*.ipynb",
  ".git",
  "__pycache__",
  "build",
  "dist",
]
extend-ignore = [
    "E501",
    "T201",
]

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["pytest_examples"]
exclude = ["tests"]
namespaces = false


[tool.setuptools_scm]
write_to = "_version.py"


[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["--cov", "--mpl", "-ra", "--showlocals", "--strict-config", "--strict-markers"]
xfail_strict = true
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning"
]
log_cli_level = "info"

[tool.coverage.run]
source = ["pytestexamples"]
omit = [
  "_version.py",
  "*tests*",
  "**/__init__*",
]

[tool.black]
line-length = 120
target-version = ['py312']
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.venv
    | \docs
  )/
)
'''

[tool.ruff]
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "docs/source",
]
# per-file-ignores = []
line-length = 120
target-version = "py312"
lint.select = [
  "A", # flake8-builtin
  "B", # flake8-bugbear
  "C",
  "D", # pydocstyle
  "E", # pycdoestyle error
  "F",
  "I", # isort
  "NPY", # numpy
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "R",
  # "S", # flake8-bandit
  "W", # pycodestyle warning
  "U",
  "UP", # pyupgrade
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
lint.fixable = [
  "A", # flake8-builtin
  "B", # flake8-bugbear
  "C",
  "D", # pydocstyle
  "E", # pycdoestyle error
  "F",
  "I", # isort
  "NPY", # numpy
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "R",
  # "S", # flake8-bandit
  "W", # pycodestyle warning
  "U",
  "UP", # pyupgrade
]
lint.unfixable = []

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.isort]
case-sensitive = true

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.flake8-pytest-style]
fixture-parentheses = true

[tool.mypy]
files = ["pytest_examples", "tests"]
python_version = 3.11
strict = true
show_error_codes = true
warn_unreachable = true
disable_error_code = [
  "misc",  # Due to errors "Untyped decorator makes function 'x' untyped" from pytest
  "no-any-return"
]
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
exclude='''
(
  /(
      \docs
  )/
)
'''

[tool.codespell]
skip = "*.po,*.ts,"
count = ""
quiet-level = 3


[tool.numpydoc_validation]
checks = [
  "all",
  "ES01",
  "EX01",
  # "PR01",
  "PR10", # Conflicts with black formatting
  "SA01",
]
exclude = [  # don't report on objects that match any of these regex
    "\\.undocumented_method$",
    "\\.__repr__$",
]
override_SS05 = [  # override SS05 to allow docstrings starting with these words
    "^Process ",
    "^Assess ",
    "^Access ",
]


# [project.scripts]
